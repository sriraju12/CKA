Step 01: Create EKS Cluster using eksctl

eksctl create cluster --name=amcdemo \
                      --region=us-east-1 \
                      --zones=us-east-1a,us-east-1b \
                      --without-nodegroup   

Get List of clusters  ->  eksctl get cluster

Step 02: Create & Associate IAM OIDC Provider for our EKS Cluster

To enable and use AWS IAM roles for Kubernetes service accounts on our EKS cluster, we must
create & associate OIDC identity provider.

# Template
eksctl utils associate-iam-oidc-provider \
    --region region-code \
    --cluster <cluter-name> \
    --approve

 # Replace with region & cluster name
eksctl utils associate-iam-oidc-provider \
    --region us-east-1 \
    --cluster amcdemo \
    --approve


Step 03: Create EC2 Keypair

* Create a new EC2 Keypair with name as amc-demo
* This keypair we will use it when creating the EKS NodeGroup.
* This will help us to login to the EKS Worker Nodes using Terminal.

Step 04: Create Node Group with additional Add-Ons in Public Subnets

These add-ons will create the respective IAM policies for us automatically within our Node Group role.

# Create Public Node Group   
eksctl create nodegroup --cluster=amcdemo \
                       --region=us-east-1 \
                       --name=amcdemo-ng-public1 \
                       --node-type=t3.medium \
                       --nodes=2 \
                       --nodes-min=2 \
                       --nodes-max=4 \
                       --node-volume-size=20 \
                       --ssh-access \
                       --ssh-public-key=amc-demo \
                       --managed \
                       --asg-access \
                       --external-dns-access \
                       --full-ecr-access \
                       --appmesh-access \
                       --alb-ingress-access


Step 05: Verify Cluster & Nodes

List EKS clusters -> eksctl get cluster

List NodeGroups in a cluster -> eksctl get nodegroup --cluster=<clusterName>

List Nodes in current kubernetes cluster -> kubectl get nodes -o wide

Our kubectl context should be automatically changed to new cluster -> kubectl config view --minify


Step 06: Delete Node Group

List EKS Clusters -> eksctl get clusters

Capture Node Group name  -> eksctl get nodegroup --cluster=<clusterName>
                            eksctl get nodegroup --cluster=amcdemo

Delete Node Group  ->  eksctl delete nodegroup --cluster=<clusterName> --name=<nodegroupName>
                       eksctl delete nodegroup --cluster=amcdemo --name=amcdemo-ng-public  

 
Step 07: Delete Cluster     

Delete Cluster  -> eksctl delete cluster <clusterName>
                   eksctl delete cluster amcdemo





##########################################################################################################################


 Monitoring:

1. Install Prometheus and Grafana:

  Set up Prometheus and Grafana to monitor your application.

  Installing Prometheus:

  First, create a dedicated Linux user for Prometheus and download Prometheus:

  sudo useradd --system --no-create-home --shell /bin/false prometheus
  wget https://github.com/prometheus/prometheus/releases/download/v2.47.1/prometheus-2.47.1.linux-amd64.tar.gz

  Extract Prometheus files, move them, and create directories:

   tar -xvf prometheus-2.47.1.linux-amd64.tar.gz
   cd prometheus-2.47.1.linux-amd64/
   sudo mkdir -p /data /etc/prometheus
   sudo mv prometheus promtool /usr/local/bin/
   sudo mv consoles/ console_libraries/ /etc/prometheus/
   sudo mv prometheus.yml /etc/prometheus/prometheus.yml

   Set ownership for directories:

   sudo chown -R prometheus:prometheus /etc/prometheus/ /data/

   Create a systemd unit configuration file for Prometheus:

   vi /etc/systemd/system/prometheus.service

   Add the following content to the prometheus.service file:

    [Unit]
    Description=Prometheus
    Wants=network-online.target
    After=network-online.target

    StartLimitIntervalSec=500
    StartLimitBurst=5

    [Service]
    User=prometheus
    Group=prometheus
    Type=simple
    Restart=on-failure
    RestartSec=5s
    ExecStart=/usr/local/bin/prometheus \
    --config.file=/etc/prometheus/prometheus.yml \
    --storage.tsdb.path=/data \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries \
    --web.listen-address=0.0.0.0:9090 \
    --web.enable-lifecycle

    [Install]
    WantedBy=multi-user.target

    Here's a brief explanation of the key parts in this prometheus.service file:

        User and Group specify the Linux user and group under which Prometheus will run.
        ExecStart is where you specify the Prometheus binary path, the location of the configuration file (prometheus.yml), the storage directory, and other settings.
        web.listen-address configures Prometheus to listen on all network interfaces on port 9090.
        web.enable-lifecycle allows for management of Prometheus through API calls.


    Enable and start Prometheus:

    sudo systemctl enable prometheus
    sudo systemctl start prometheus

    Verify Prometheus's status:

    sudo systemctl status prometheus

    You can access Prometheus in a web browser using your server's IP and port 9090:

    http://<your-server-ip>:9090


   
   
    Installing Node Exporter:

    Create a system user for Node Exporter and download Node Exporter:

    sudo useradd --system --no-create-home --shell /bin/false node_exporter
    wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz

    Extract Node Exporter files, move the binary, and clean up:

    tar -xvf node_exporter-1.6.1.linux-amd64.tar.gz
    sudo mv node_exporter-1.6.1.linux-amd64/node_exporter /usr/local/bin/
    rm -rf node_exporter*

    Create a systemd unit configuration file for Node Exporter:

    vi /etc/systemd/system/node_exporter.service

    Add the following content to the node_exporter.service file:

            [Unit]
        Description=Node Exporter
        Wants=network-online.target
        After=network-online.target

        StartLimitIntervalSec=500
        StartLimitBurst=5

        [Service]
        User=node_exporter
        Group=node_exporter
        Type=simple
        Restart=on-failure
        RestartSec=5s
        ExecStart=/usr/local/bin/node_exporter --collector.logind

        [Install]
        WantedBy=multi-user.target

    Replace --collector.logind with any additional flags as needed.

    Enable and start Node Exporter:

    sudo systemctl enable node_exporter
    sudo systemctl start node_exporter

    Verify the Node Exporter's status:

    sudo systemctl status node_exporter
    You can access Node Exporter metrics in Prometheus.


2.Configure Prometheus Plugin Integration:

   Prometheus Configuration:

   To configure Prometheus to scrape metrics from Node Exporter and Jenkins, you need to modify the
   prometheus.yml file. Here is an example prometheus.yml configuration for your setup:

        global:
        scrape_interval: 15s

        scrape_configs:
        - job_name: 'node_exporter'
            static_configs:
              - targets: ['localhost:9100']

        - job_name: 'jenkins'
            metrics_path: '/prometheus'
            static_configs:
              - targets: ['<your-jenkins-ip>:<your-jenkins-port>']

    Make sure to replace <your-jenkins-ip> and <your-jenkins-port> with the appropriate values for your 
    Jenkins setup.

    Check the validity of the configuration file:

    promtool check config /etc/prometheus/prometheus.yml

    Reload the Prometheus configuration without restarting:

    curl -X POST http://localhost:9090/-/reload

    You can access Prometheus targets at  -> http://<your-prometheus-ip>:9090/targets



    Grafana:

    Step 1: Install Dependencies:
    First, ensure that all necessary dependencies are installed:

    sudo apt-get update
    sudo apt-get install -y apt-transport-https software-properties-common

    Step 2: Add the GPG Key:
    Add the GPG key for Grafana:
    wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -

    Step 3: Add Grafana Repository:
    Add the repository for Grafana stable releases:
    echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list

    Step 4: Update and Install Grafana:
    Update the package list and install Grafana:
    
    sudo apt-get update
    sudo apt-get -y install grafana


    Step 5: Enable and Start Grafana Service:
    To automatically start Grafana after a reboot, enable the service:

    sudo systemctl enable grafana-server

    Then, start Grafana:
    sudo systemctl start grafana-server

    Step 6: Check Grafana Status:
    Verify the status of the Grafana service to ensure it's running correctly:
    sudo systemctl status grafana-server

    Step 7: Access Grafana Web Interface:
    Open a web browser and navigate to Grafana using your server's IP address. The default port for Grafana is 3000. For example:

    http://<your-server-ip>:3000



    Monitor Kubernetes with Prometheus:
   
    Prometheus is a powerful monitoring and alerting toolkit, and you'll use it to monitor your Kubernetes
    cluster. Additionally, you'll install the node exporter using Helm to collect metrics from your cluster nodes.

    Install Node Exporter using Helm:
    To begin monitoring your Kubernetes cluster, you'll install the Prometheus Node Exporter. This component
    allows you to collect system-level metrics from your cluster nodes. Here are the steps to install the 
    Node Exporter using Helm:

    1.Add the Prometheus Community Helm repository:
    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    2.Create a Kubernetes namespace for the Node Exporter:
    kubectl create namespace prometheus-node-exporter

    3.Install the Node Exporter using Helm:
    helm install prometheus-node-exporter prometheus-community/prometheus-node-exporter --namespace prometheus-node-exporter

    Add a Job to Scrape Metrics on nodeip:9001/metrics in prometheus.yml:
    Update your Prometheus configuration (prometheus.yml) to add a new job for scraping metrics from 
    nodeip:9001/metrics. You can do this by adding the following configuration to your prometheus.yml file:

      - job_name: 'k8s'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['node1Ip:9100']

    Replace 'your-job-name' with a descriptive name for your job. The static_configs section specifies the 
    targets to scrape metrics from, and in this case, it's set to nodeip:9001.

    Check the validity of the configuration file:
    promtool check config /etc/prometheus/prometheus.yml

    Reload the Prometheus configuration without restarting:
    curl -X POST http://localhost:9090/-/reload






















 




